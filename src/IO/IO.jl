export FileFormat
export BAND_dat, POSCAR, RESPACKU, RESPACKJ, QEcell, dat_eigenvalue
export wannier90_chk, wannier90_eig, wannier90_xsf, wannier90_hr, wannier90_centres, wannier90_amn, wannier90_mmn, wannier90_win

"""
	abstract type FileFormat end

The file format we supposed is its subtype.


	read(path::AbstractString, ::Type{T}; kwargs...) where{T <: FileFormat}
	read(io::IO, ::Type{T}; kwargs...) where{T <: FileFormat}

Read data from a file or an IO stream in the specified file format.


	write(path::AbstractString, data, ::Type{T}; mode = "w", comment = "", kwargs...) where {T <: FileFormat}
	write(io::IO, data, ::Type{T}; comment = "", kwargs...) where {T <: FileFormat}
	
Write data to a file or an IO stream in the specified file format.

- `mode`: the write mode used by [`Base.open`](https://docs.julialang.org/en/v1/base/io-network/#Base.open)
- `comment`: it's the comment line in file, and mostly is the first line.
"""
abstract type FileFormat end

"""
Its format is the same as "BAND.dat" generated by vaspkit, contains band structure.

	read(path/io, ::Type{BAND_dat}; readkname='N', smoothband='N') -> (band, kline)

- `band`: is a matrix with size (nband, nk);
- `kline` is a instance of [`Kline`](@ref).
- `readkname` determines whether the file contain the block of `Kline`.

	write(path/io, band, ::Type{BAND_dat}; kline)

- `band`: can be Eigen, Vector{Eigen} or AbstractVecOrMat{<:Real};
- `kline`: a instance of [`Kline`](@ref) with a empty default.

!!! note
	(nband, nk) = size(band)
"""
struct BAND_dat <: FileFormat end
"""
`POSCAR` is the input file of vasp, contains the structure of unitcell.

	read(path/io, ::Type{POSCAR}; period = Bool[1, 1, 1]) -> Cell

- `period`: represents the periodicity in three directions, should be a vector with 3 elements, and each elements should be `1` or `0`.

	write(path/io, cell::Cell, ::Type{POSCAR}; format = "Cartesian")

- `format`: can be "Cartesian" or "Direct".
"""
struct POSCAR <: FileFormat end
"""
The format of output file `dir-intW/dat.Wmat` of RESPACK, also `dir-intW/dat.Vmat`.

	read(path/io, ::Type{RESPACKU}; norb::Integer) -> HR

- `norb::Integer`, the number of orbitals.

Compared to [`RESPACKJ`](@ref), this method will read all the data in the file including onsite term.
"""
struct RESPACKU <: FileFormat end
"""
The format of output file `dir-intJ/dat.Jmat` of RESPACK, also `dir-intW/dat.Xmat`.

	read(path::AbstractString/io::IO, ::Type{RESPACKJ}; norb::Integer) -> HR

- `norb`::Integer, the number of orbitals.

Compared to [`RESPACKU`](@ref), this method will read all the data in the file except onsite term.
"""
struct RESPACKJ <: FileFormat end
"""
The format of cell structure block in `pw.in`.

	write(path/io, cell::Cell, ::Type{QEcell})

"""
struct QEcell <: FileFormat end
"""
File `dir-wfn/dat.eigenvalue` contains electronic band structure, output by wan2respack or RESPACK.

	read(path/io, ::Type{dat_eigenvalue}) -> Matrix{Float64}
	write(path/io, band::Matrix{<:Real}, ::Type{dat_eigenvalue})

"""
struct dat_eigenvalue <: FileFormat end
"""
wannier90.chk

	read(path/io, ::Type{wannier90_chk}) -> Wannier90chk

"""
struct wannier90_chk <: FileFormat end
"""
wannier90.eig

	write(path/io, band, ::Type{wannier90_eig}; bandindex::AbstractVector{<:Integer})

- `band` can be a `Eigen`, or a vector of `Eigen` or a VecorMat of real numbers.
- `bandindex` is the index of bands to be written, default is all bands.
"""
struct wannier90_eig <: FileFormat end
"""
wannier90_w.xsf

	read(path/io, ::Type{wannier90_xsf}) -> Wannier90xsf

"""
struct wannier90_xsf <: FileFormat end
"""
wannier90_hr.dat

	read(path/io, ::Type{wannier90_hr}; heps::Real = 0, readimag = 'Y', μ::Real = 0, hrsort = 'N') -> HR

- `heps`::Real = 0, can be set as a random positive real number, which is used to filter small values.
- `readimag` = 'Y', can be set as 'N' or 'n', which decides whether to read imaginary part.
- `μ`::Real = 0, can be set as a random real number, which is the chemical potential.
- `hrsort` = 'N', can be set as 'Y' or 'y', which decides whether to sort the HR object according to the standard order.

	write(path/io, hr::HR, ::Type{wannier90_hr})

"""
struct wannier90_hr <: FileFormat end
"""
wannier90_centres.dat

	read(path/io, ::Type{wannier90_centres}) -> ORBITAL

	write(path/io, orbital::ORBITAL, ::Type{wannier90_centres})

"""
struct wannier90_centres <: FileFormat end
"""
wannier90.amn

	write(path/io, A::AbstractArray{<:Number}, ::Type{wannier90_amn})		

(nband, nwannier, nk) = size(A)
"""
struct wannier90_amn <: FileFormat end
"""
wannier90.mmn

	write(path/io, M::AbstractArray{<:Number}, ::Type{wannier90_mmn}; nnkpts::AbstractMatrix{<:Integer})

- `M` is a 3D array, the first two dimensions are band indices, the third dimension is k-b pair index.
- `nnkpts` is a 5xN matrix, each column is (ik1, ib2, G1, G2, G3) for one k-b pair, it must be provided.
"""
struct wannier90_mmn <: FileFormat end

"""
wannier90.win

	write(io::IO, cell::Cell, ::Type{wannier90_win}; kwargs...)

kwargs:
- `num_iter`: ;
- `num_print_cycles`: default is 20;
- `search_shells`: default is 100;
- `shell_list`: default is `nothing`;
- `dis_num_iter`: ;
- `dis_conv_tol`: default is 1e-12;
- `dis_conv_window`: default is 5;
- `exclude_bands`: default is `nothing`;
- `num_bands`: ;
- `dis_win_min`: ;
- `dis_win_max`: ;
- `dis_froz_min`: ;
- `dis_froz_max`: ;
- `num_wann`: ;
- `use_bloch_phases`: default is `false`;
- `spinors`: default is `false`;
- `guiding_centres`: default is `false`;
- `projections`: default is `nothing`;
- `wannier_plot`: default is `false`;
- `wannier_plot_format`: default is "xcrysden";
- `wannier_plot_supercell`: default is `nothing`;
- `bands_plot`: default is `false`;
- `bands_num_points`: default is 30;
- `bands_plot_format`: default is "gnuplot xmgrace";
- `kpoint_path`: default is `nothing`, its format is the same as input of [`Kline`](@ref);
- `grid`: Union{[`MonkhorstPack`](@ref), [`RedKgrid`](@ref)}.
"""
struct wannier90_win <: FileFormat end


include("./read/read.jl")
include("./write/write.jl")
