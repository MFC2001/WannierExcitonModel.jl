
export RealInverseR, RealGauss

struct RealInverseR <: RealCoulomb
	ϵ::Float64
	CoulombScaleϵ::Float64
end
function (v::RealInverseR)(r::AbstractVector{<:Real})
	r = norm(r)
	return r == 0 ? 0 : v.CoulombScaleϵ / r
end
function (v::RealInverseR)(r::Real)
	return r == 0 ? 0 : v.CoulombScaleϵ / r
end
"""
	RealInverseR(; ϵ::Real = 1) -> RealInverseR

Calculate Coulomb potential generated by a point charge in real space:

```math
V(r) = \\frac{e²}{4πϵ₀ϵ} \\frac{1}{|r|}
```

unit: r(Å), V(eV), ϵ(dimensionless).

# Example

```julia
julia> V = RealInverseR(; ϵ = 1.5)
julia> r = [1.0, 0.0, 0.0] # or r = 1.0
julia> V(r)
```
Note V(0) = 0 here.
"""
function RealInverseR(; ϵ::Real = 1)
	CoulombScaleϵ = CoulombScale / ϵ
	return RealInverseR(ϵ, CoulombScaleϵ)
end

struct RealGauss <: RealCoulomb
	ϵ::Float64
	α::Float64
	CoulombScaleϵ::Float64
	V₀::Float64
end
function (v::RealGauss)(r::AbstractVector{<:Real})
	r = norm(r)
	return r == 0 ? v.V₀ : v.CoulombScaleϵ * erf(v.α * r) / r
end
function (v::RealGauss)(r::Real)
	return r == 0 ? v.V₀ : v.CoulombScaleϵ * erf(v.α * r) / r
end
"""
	RealGauss(; ϵ::Real = 1, α::Real = 1) -> RealGauss

Calculate Coulomb potential generated by a charge of Gaussian distribution in real space:

```math
V(r) = \\frac{e²}{4πϵ₀ϵ} \\frac{erf(α|r|)}{|r|}
```

unit: r(Å), V(eV), α(1/Å), ϵ(dimensionless).

# Example

```julia
julia> V = RealGauss(; ϵ = 1.5, α = 2)
julia> r = [1.0, 0.0, 0.0] # or r = 1.0
julia> V(r)
```
"""
function RealGauss(; ϵ::Real = 1, α::Real = 1)
	CoulombScaleϵ = CoulombScale / ϵ
	V₀ = CoulombScaleϵ * 2 * α / √π
	return RealGauss(ϵ, α, CoulombScaleϵ, V₀)
end
