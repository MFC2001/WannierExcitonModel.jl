
function HexagonalTB(; a = 1, c = 20, t‚ÇÄ = 0, t‚ÇÅ = 1, t‚ÇÇ = 0, t‚Çï = 0)

	cell = HexagonalCell(; a, c)
	hr = HexagonalHR(; t‚ÇÄ, t‚ÇÅ, t‚ÇÇ, t‚Çï)

	orb_location = deepcopy(cell.location)
	orb_name = deepcopy(cell.name)

	return TightBindModel(
		cell.lattice,
		cell.name,
		cell.location,
		orb_name,
		orb_location,
		HermitianReciprocalHoppings(hr),
		cell.period)
end
function HexagonalCell(; a = 1, c = 20)

	l = ‚àö3 * a
	ùêö = [l, 0, 0]
	ùêõ = l * [-1 / 2, ‚àö3 / 2, 0]
	ùêú = [0, 0, c]

	lattice = Lattice([ùêö ùêõ ùêú])

	location1 = [0, a, c / 2]
	location2 = [l / 2, a / 2, c / 2]

	location = CartesianCoordinates.([location1, location2])
	location = map(x -> lattice \ x, location)

	return Cell(lattice, location; location_type = "ReducedCoordinates", name = fill("X", 2), period = Bool[1, 1, 0])
end
function HexagonalHR(; t‚ÇÄ = 0, t‚ÇÅ = 1, t‚ÇÇ = 0, t‚Çï = 0)
	allpath = Matrix{Int}(undef, 0, 5)
	allvalue = Vector{Float64}(undef, 0)
	if !iszero(t‚ÇÄ)
		path_t‚ÇÄ = [
			0 0 0 1 1;
			0 0 0 2 2
		]
		value_t‚ÇÄ = fill(t‚ÇÄ, size(path_t‚ÇÄ, 1))
		allpath = [allpath; path_t‚ÇÄ]
		allvalue = [allvalue; value_t‚ÇÄ]
	end
	if !iszero(t‚ÇÅ)
		path_t‚ÇÅ = [
			0 0 0 1 2;
			-1 0 0 1 2;
			0 1 0 1 2;
			0 0 0 2 1;
			1 0 0 2 1;
			0 -1 0 2 1
		]
		value_t‚ÇÅ = fill(t‚ÇÅ, size(path_t‚ÇÅ, 1))
		allpath = [allpath; path_t‚ÇÅ]
		allvalue = [allvalue; value_t‚ÇÅ]
	end
	if !iszero(t‚ÇÇ)
		path_t‚ÇÇ = [
			1 1 0 1 1;
			1 0 0 1 1;
			0 1 0 1 1;
			-1 0 0 1 1;
			0 -1 0 1 1;
			-1 -1 0 1 1;
			1 1 0 2 2;
			1 0 0 2 2;
			0 1 0 2 2;
			-1 0 0 2 2;
			0 -1 0 2 2;
			-1 -1 0 2 2
		]
		value_t‚ÇÇ = fill(t‚ÇÇ, size(path_t‚ÇÇ, 1))
		allpath = [allpath; path_t‚ÇÇ]
		allvalue = [allvalue; value_t‚ÇÇ]
	end
	if !iszero(t‚Çï)
		path_t‚Çï = [
			1 1 0 1 1;
			1 0 0 1 1;
			0 1 0 1 1;
			-1 0 0 1 1;
			0 -1 0 1 1;
			-1 -1 0 1 1;
			1 1 0 2 2;
			1 0 0 2 2;
			0 1 0 2 2;
			-1 0 0 2 2;
			0 -1 0 2 2;
			-1 -1 0 2 2
		]
		value_t‚Çï = t‚Çï * im * [1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1]
		allpath = [allpath; path_t‚Çï]
		allvalue = [allvalue; value_t‚Çï]
	end

	return HR(allpath, allvalue; orbindex = collect(1:2), hrsort = "Y")
end
