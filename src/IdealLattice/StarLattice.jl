
function StarTB(; a = 1, b = 2, c = 20,
	t‚ÇÄ = 0, t‚ÇÅ = 1.5, t‚ÇÇ = 1, t‚ÇÉ = 0, t‚ÇÑ = 0, t‚ÇÖ = 0, t_inverse = 0)

	cell = StarCell(; a, b, c)
	orb_location = deepcopy(cell.location)
	orb_name = deepcopy(cell.name)

	hr = StarHR(; t‚ÇÄ, t‚ÇÅ, t‚ÇÇ, t‚ÇÉ, t‚ÇÑ, t‚ÇÖ, t_inverse)

	return TightBindModel(
		cell.lattice,
		cell.name,
		cell.location,
		orb_name,
		orb_location,
		HermitianReciprocalHoppings(hr),
		cell.period)
end
function StarCell(; a = 1, b = 2, c = 20)

	l = ‚àö3 * a + 2 * b
	ùêö = Vec3(l, 0, 0)
	ùêõ = l * Vec3(-1 / 2, ‚àö3 / 2, 0)
	ùêú = Vec3(0, 0, c)

	lattice = Lattice([ùêö ùêõ ùêú])

	location1 = [l / 2, a / 2, c / 2]
	location2 = location1 + [b / 2, ‚àö3 * b / 2, 0]
	location3 = location1 + [-b / 2, ‚àö3 * b / 2, 0]

	location5 = ùêõ / 2 + a / 2 * [‚àö3 / 2, 1 / 2, 0] + ùêú / 2
	location4 = location5 + [b, 0, 0]
	location6 = location4 + [-b / 2, ‚àö3 * b / 2, 0]

	location = CartesianCoordinates.([location1, location2, location3, location4, location5, location6])
	location = map(x -> lattice \ x, location)

	return Cell(lattice, location, "ReducedCoordinates"; name = fill("X", 6), period = Bool[1, 1, 0])
end
function StarHR(; t‚ÇÄ = 0, t‚ÇÅ = 1.5, t‚ÇÇ = 1, t‚ÇÉ = 0, t‚ÇÑ = 0, t‚ÇÖ = 0, t_inverse = 0)
	allpath = Matrix{Int}(undef, 0, 5)
	allvalue = Vector{Float64}(undef, 0)
	if !iszero(t‚ÇÄ)
		path_t‚ÇÄ = [
			0 0 0 1 1;
			0 0 0 2 2;
			0 0 0 3 3;
			0 0 0 4 4;
			0 0 0 5 5;
			0 0 0 6 6
		]
		value_t‚ÇÄ = fill(t‚ÇÄ, size(path_t‚ÇÄ, 1))
		allpath = [allpath; path_t‚ÇÄ]
		allvalue = [allvalue; value_t‚ÇÄ]
	end
	if !iszero(t‚ÇÅ)
		path_t‚ÇÅ = [
			0 0 0 3 4;
			0 0 0 4 3;
			0 -1 0 1 6;
			1 0 0 2 5;
			-1 0 0 5 2;
			0 1 0 6 1
		]
		value_t‚ÇÅ = fill(t‚ÇÅ, size(path_t‚ÇÅ, 1))
		allpath = [allpath; path_t‚ÇÅ]
		allvalue = [allvalue; value_t‚ÇÅ]
	end
	if !iszero(t‚ÇÇ)
		path_t‚ÇÇ = [
			0 0 0 1 2;
			0 0 0 2 1;
			0 0 0 1 3;
			0 0 0 3 1;
			0 0 0 2 3;
			0 0 0 3 2;
			0 0 0 4 5;
			0 0 0 5 4;
			0 0 0 4 6;
			0 0 0 6 4;
			0 0 0 5 6;
			0 0 0 6 5
		]
		value_t‚ÇÇ = fill(t‚ÇÇ, size(path_t‚ÇÇ, 1))
		allpath = [allpath; path_t‚ÇÇ]
		allvalue = [allvalue; value_t‚ÇÇ]
	end
	if !iszero(t‚ÇÉ)
		path_t‚ÇÉ = [
			0 0 0 1 4;
			1 0 0 1 5;
			0 -1 0 1 4;
			0 -1 0 1 5;
			0 0 0 2 4;
			0 -1 0 2 6;
			1 0 0 2 4;
			1 0 0 2 6;
			0 0 0 3 5;
			0 0 0 3 6;
			1 0 0 3 5;
			0 -1 0 3 6;
			0 0 0 4 1;
			0 0 0 4 2;
			0 1 0 4 1;
			-1 0 0 4 2;
			0 0 0 5 3;
			0 1 0 5 1;
			-1 0 0 5 1;
			-1 0 0 5 3;
			0 0 0 6 3;
			-1 0 0 6 2;
			0 1 0 6 2;
			0 1 0 6 3
		]
		value_t‚ÇÉ = fill(t‚ÇÉ, size(path_t‚ÇÉ, 1))
		allpath = [allpath; path_t‚ÇÉ]
		allvalue = [allvalue; value_t‚ÇÉ]
	end
	if !iszero(t‚ÇÑ)
		path_t‚ÇÑ = [
			0 0 0 1 5;
			1 0 0 1 4;
			0 0 0 2 6;
			0 -1 0 2 4;
			0 -1 0 3 5;
			1 0 0 3 6;
			-1 0 0 4 1;
			0 1 0 4 2;
			0 0 0 5 1;
			0 1 0 5 3;
			0 0 0 6 2;
			-1 0 0 6 3
		]
		value_t‚ÇÑ = fill(t‚ÇÑ, size(path_t‚ÇÑ, 1))
		allpath = [allpath; path_t‚ÇÑ]
		allvalue = [allvalue; value_t‚ÇÑ]
	end
	if !iszero(t‚ÇÖ)
		path_t‚ÇÖ = [
			-1 -1 0 1 2;
			0 -1 0 1 3;
			1 1 0 2 1;
			1 0 0 2 3;
			0 1 0 3 1;
			-1 0 0 3 2;
			1 0 0 4 5;
			0 -1 0 4 6;
			-1 0 0 5 4;
			-1 -1 0 5 6;
			0 1 0 6 4;
			1 1 0 6 5
		]
		value_t‚ÇÖ = fill(t‚ÇÖ, size(path_t‚ÇÖ, 1))
		allpath = [allpath; path_t‚ÇÖ]
		allvalue = [allvalue; value_t‚ÇÖ]
	end
	if !iszero(t_inverse)
		path_t_inverse = [
			0 0 0 1 1;
			0 0 0 2 2;
			0 0 0 3 3;
			0 0 0 4 4;
			0 0 0 5 5;
			0 0 0 6 6
		]
		value_t_inverse = [t_inverse, t_inverse, t_inverse, -t_inverse, -t_inverse, -t_inverse]
		allpath = [allpath; path_t_inverse]
		allvalue = [allvalue; value_t_inverse]
	end

	return HR(allpath, allvalue; orbindex = collect(1:6), hrsort = "Y")
end
function StarHR(::Val{:Haldane}, t_uu::Real, t_dd::Real = -t_uu)
	haldane_uu_path = [
		0 0 0 1 4 1;
		1 0 0 1 5 -1;
		0 -1 0 1 4 1;
		0 -1 0 1 5 -1;
		0 0 0 2 4 -1;
		0 -1 0 2 6 1;
		1 0 0 2 4 -1;
		1 0 0 2 6 1;
		0 0 0 3 5 1;
		0 0 0 3 6 -1;
		1 0 0 3 5 1;
		0 -1 0 3 6 -1;
		0 0 0 4 1 -1;
		0 0 0 4 2 1;
		0 1 0 4 1 -1;
		-1 0 0 4 2 1;
		0 1 0 5 1 1;
		0 0 0 5 3 -1;
		-1 0 0 5 1 1;
		-1 0 0 5 3 -1;
		-1 0 0 6 2 -1;
		0 0 0 6 3 1;
		0 1 0 6 2 -1;
		0 1 0 6 3 1
	]

	haldane_uu_value = haldane_uu_path[:, 6] .* complex(0, t_uu)
	haldane_dd_value = haldane_uu_path[:, 6] .* complex(0, t_dd)
	haldane_uu_path = haldane_uu_path[:, 1:5]
	haldane_dd_path = copy(haldane_uu_path)
	haldane_dd_path[:, 4:5] .+= 6

	path = [haldane_uu_path; haldane_dd_path]
	value = [haldane_uu_value; haldane_dd_value]

	return HR(path, value; orbindex = collect(1:12))
end
function StarHR(::Val{:Haldane_singlespin}, t_uu::Real)
	haldane_uu_path = [
		0 0 0 1 4 1;
		1 0 0 1 5 -1;
		0 -1 0 1 4 1;
		0 -1 0 1 5 -1;
		0 0 0 2 4 -1;
		0 -1 0 2 6 1;
		1 0 0 2 4 -1;
		1 0 0 2 6 1;
		0 0 0 3 5 1;
		0 0 0 3 6 -1;
		1 0 0 3 5 1;
		0 -1 0 3 6 -1;
		0 0 0 4 1 -1;
		0 0 0 4 2 1;
		0 1 0 4 1 -1;
		-1 0 0 4 2 1;
		0 1 0 5 1 1;
		0 0 0 5 3 -1;
		-1 0 0 5 1 1;
		-1 0 0 5 3 -1;
		-1 0 0 6 2 -1;
		0 0 0 6 3 1;
		0 1 0 6 2 -1;
		0 1 0 6 3 1
	]

	haldane_uu_value = haldane_uu_path[:, 6] .* complex(0, t_uu)
	haldane_uu_path = haldane_uu_path[:, 1:5]

	return HR(haldane_uu_path, haldane_uu_value; orbindex = collect(1:6))
end
